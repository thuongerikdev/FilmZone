// <auto-generated />
using System;
using FZ.Auth.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FZ.WebAPI.Migrations
{
    [DbContext(typeof(AuthDbContext))]
    [Migration("20251003030603_AuthV1")]
    partial class AuthV1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FZ.Auth.Domain.Billing.Invoice", b =>
                {
                    b.Property<int>("invoiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("invoiceID"));

                    b.Property<decimal>("discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("dueAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("issuedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("orderID")
                        .HasColumnType("integer");

                    b.Property<string>("pdfUrl")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int?>("subscriptionID")
                        .HasColumnType("integer");

                    b.Property<decimal>("subtotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("userID")
                        .HasColumnType("integer");

                    b.HasKey("invoiceID");

                    b.HasIndex("orderID");

                    b.HasIndex("subscriptionID");

                    b.HasIndex("userID", "issuedAt");

                    b.ToTable("Invoice", "auth");
                });

            modelBuilder.Entity("FZ.Auth.Domain.Billing.Order", b =>
                {
                    b.Property<int>("orderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("orderID"));

                    b.Property<decimal>("amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("currency")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<DateTime?>("expiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("planID")
                        .HasColumnType("integer");

                    b.Property<int>("priceID")
                        .HasColumnType("integer");

                    b.Property<string>("provider")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("providerSessionId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)");

                    b.Property<int>("userID")
                        .HasColumnType("integer");

                    b.HasKey("orderID");

                    b.HasIndex("planID");

                    b.HasIndex("priceID");

                    b.HasIndex("userID");

                    b.HasIndex("provider", "providerSessionId")
                        .IsUnique();

                    b.ToTable("Order", "auth");
                });

            modelBuilder.Entity("FZ.Auth.Domain.Billing.Payment", b =>
                {
                    b.Property<int>("paymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("paymentID"));

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("failureReason")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("invoiceID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("paidAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("provider")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("providerPaymentId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)");

                    b.HasKey("paymentID");

                    b.HasIndex("invoiceID");

                    b.HasIndex("provider", "providerPaymentId");

                    b.ToTable("Payment", "auth");
                });

            modelBuilder.Entity("FZ.Auth.Domain.Billing.Plan", b =>
                {
                    b.Property<int>("planID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("planID"));

                    b.Property<string>("code")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("description")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<bool>("isActive")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("planID");

                    b.HasIndex("code")
                        .IsUnique();

                    b.ToTable("Plan", "auth");

                    b.HasData(
                        new
                        {
                            planID = 1,
                            code = "VIP",
                            description = "Quyền lợi VIP (không quảng cáo, chất lượng cao...)",
                            isActive = true,
                            name = "Gói VIP"
                        });
                });

            modelBuilder.Entity("FZ.Auth.Domain.Billing.Price", b =>
                {
                    b.Property<int>("priceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("priceID"));

                    b.Property<decimal>("amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("currency")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<int>("intervalCount")
                        .HasColumnType("integer");

                    b.Property<string>("intervalUnit")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<bool>("isActive")
                        .HasColumnType("boolean");

                    b.Property<int>("planID")
                        .HasColumnType("integer");

                    b.Property<int?>("trialDays")
                        .HasColumnType("integer");

                    b.HasKey("priceID");

                    b.HasIndex("planID", "currency", "intervalUnit", "intervalCount")
                        .IsUnique();

                    b.ToTable("Price", "auth");

                    b.HasData(
                        new
                        {
                            priceID = 101,
                            amount = 99000m,
                            currency = "VND",
                            intervalCount = 1,
                            intervalUnit = "month",
                            isActive = true,
                            planID = 1
                        },
                        new
                        {
                            priceID = 102,
                            amount = 249000m,
                            currency = "VND",
                            intervalCount = 3,
                            intervalUnit = "month",
                            isActive = true,
                            planID = 1
                        },
                        new
                        {
                            priceID = 103,
                            amount = 459000m,
                            currency = "VND",
                            intervalCount = 6,
                            intervalUnit = "month",
                            isActive = true,
                            planID = 1
                        });
                });

            modelBuilder.Entity("FZ.Auth.Domain.Billing.UserSubscription", b =>
                {
                    b.Property<int>("subscriptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("subscriptionID"));

                    b.Property<bool>("autoRenew")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("cancelAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("cancelAtPeriodEnd")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("currentPeriodEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("currentPeriodStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("planID")
                        .HasColumnType("integer");

                    b.Property<int?>("priceID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("startAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)");

                    b.Property<DateTime?>("trialEndAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("userID")
                        .HasColumnType("integer");

                    b.HasKey("subscriptionID");

                    b.HasIndex("currentPeriodEnd");

                    b.HasIndex("planID");

                    b.HasIndex("priceID");

                    b.HasIndex("userID", "planID", "status");

                    b.ToTable("UserSubscription", "auth");
                });

            modelBuilder.Entity("FZ.Auth.Domain.MFA.AuthAuditLog", b =>
                {
                    b.Property<int>("auditID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("auditID"));

                    b.Property<string>("action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("detail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ip")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("result")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("userAgent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("userID")
                        .HasColumnType("integer");

                    b.HasKey("auditID");

                    b.HasIndex("userID");

                    b.ToTable("AuthAuditLog", "auth");
                });

            modelBuilder.Entity("FZ.Auth.Domain.MFA.AuthMfaSecret", b =>
                {
                    b.Property<int>("mfaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("mfaID"));

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime?>("enabledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("enrollmentStartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("isEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("label")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime?>("lastVerifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("recoveryCodes")
                        .HasColumnType("text");

                    b.Property<string>("secret")
                        .HasColumnType("text");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("userID")
                        .HasColumnType("integer");

                    b.HasKey("mfaID");

                    b.HasIndex("userID")
                        .IsUnique();

                    b.HasIndex("userID", "type")
                        .IsUnique();

                    b.ToTable("AuthMfaSecret", "auth");
                });

            modelBuilder.Entity("FZ.Auth.Domain.MFA.AuthUserSession", b =>
                {
                    b.Property<int>("sessionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("sessionID"));

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("deviceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ip")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isRevoked")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("lastSeenAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("userAgent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("userID")
                        .HasColumnType("integer");

                    b.HasKey("sessionID");

                    b.HasIndex("userID");

                    b.ToTable("AuthUserSession", "auth");
                });

            modelBuilder.Entity("FZ.Auth.Domain.Role.AuthPermission", b =>
                {
                    b.Property<int>("permissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("permissionID"));

                    b.Property<string>("permissionDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("permissionName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("permissionID");

                    b.ToTable("AuthPermission", "auth");
                });

            modelBuilder.Entity("FZ.Auth.Domain.Role.AuthRole", b =>
                {
                    b.Property<int>("roleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("roleID"));

                    b.Property<bool>("isDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("roleDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("roleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("roleID");

                    b.ToTable("AuthRole", "auth");
                });

            modelBuilder.Entity("FZ.Auth.Domain.Role.AuthRolePermission", b =>
                {
                    b.Property<int>("rolePermissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("rolePermissionID"));

                    b.Property<int>("permissionID")
                        .HasColumnType("integer");

                    b.Property<int>("roleID")
                        .HasColumnType("integer");

                    b.HasKey("rolePermissionID");

                    b.HasIndex("permissionID");

                    b.HasIndex("roleID");

                    b.ToTable("AuthRolePermission", "auth");
                });

            modelBuilder.Entity("FZ.Auth.Domain.Role.AuthUserRole", b =>
                {
                    b.Property<int>("userID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<DateTime>("assignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("roleID")
                        .HasColumnType("integer");

                    b.HasKey("userID");

                    b.HasIndex("roleID");

                    b.ToTable("AuthUserRole", "auth");
                });

            modelBuilder.Entity("FZ.Auth.Domain.Token.AuthEmailVerification", b =>
                {
                    b.Property<int>("emailVerificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("emailVerificationID"));

                    b.Property<string>("codeHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("consumedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("expiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("userID")
                        .HasColumnType("integer");

                    b.HasKey("emailVerificationID");

                    b.HasIndex("userID");

                    b.ToTable("AuthEmailVerification", "auth");
                });

            modelBuilder.Entity("FZ.Auth.Domain.Token.AuthPasswordReset", b =>
                {
                    b.Property<int>("passwordResetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("passwordResetID"));

                    b.Property<string>("codeHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("consumedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("expiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("purpose")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("userID")
                        .HasColumnType("integer");

                    b.HasKey("passwordResetID");

                    b.HasIndex("userID");

                    b.ToTable("AuthPasswordReset", "auth");
                });

            modelBuilder.Entity("FZ.Auth.Domain.Token.AuthRefreshToken", b =>
                {
                    b.Property<int>("refreshTokenID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("refreshTokenID"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("text");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("sessionID")
                        .HasColumnType("integer");

                    b.Property<int>("userID")
                        .HasColumnType("integer");

                    b.HasKey("refreshTokenID");

                    b.HasIndex("sessionID");

                    b.HasIndex("userID");

                    b.ToTable("AuthRefreshToken", "auth");
                });

            modelBuilder.Entity("FZ.Auth.Domain.User.AuthProfile", b =>
                {
                    b.Property<int>("profileID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("profileID"));

                    b.Property<string>("avatar")
                        .HasColumnType("text");

                    b.Property<DateTime?>("dateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("gender")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("userID")
                        .HasColumnType("integer");

                    b.HasKey("profileID");

                    b.HasIndex("userID")
                        .IsUnique();

                    b.ToTable("AuthProfile", "auth");
                });

            modelBuilder.Entity("FZ.Auth.Domain.User.AuthUser", b =>
                {
                    b.Property<int>("userID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("userID"));

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("googleSub")
                        .HasColumnType("text");

                    b.Property<bool>("isEmailVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("passwordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("phoneNumber")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<int>("tokenVersion")
                        .HasColumnType("integer");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("userID");

                    b.ToTable("AuthUser", "auth");
                });

            modelBuilder.Entity("FZ.Auth.Domain.Billing.Invoice", b =>
                {
                    b.HasOne("FZ.Auth.Domain.Billing.Order", "order")
                        .WithMany("invoices")
                        .HasForeignKey("orderID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("FZ.Auth.Domain.Billing.UserSubscription", "subscription")
                        .WithMany("invoices")
                        .HasForeignKey("subscriptionID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("FZ.Auth.Domain.User.AuthUser", "user")
                        .WithMany("invoices")
                        .HasForeignKey("userID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("order");

                    b.Navigation("subscription");

                    b.Navigation("user");
                });

            modelBuilder.Entity("FZ.Auth.Domain.Billing.Order", b =>
                {
                    b.HasOne("FZ.Auth.Domain.Billing.Plan", "plan")
                        .WithMany("orders")
                        .HasForeignKey("planID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FZ.Auth.Domain.Billing.Price", "price")
                        .WithMany("orders")
                        .HasForeignKey("priceID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FZ.Auth.Domain.User.AuthUser", "user")
                        .WithMany("orders")
                        .HasForeignKey("userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("plan");

                    b.Navigation("price");

                    b.Navigation("user");
                });

            modelBuilder.Entity("FZ.Auth.Domain.Billing.Payment", b =>
                {
                    b.HasOne("FZ.Auth.Domain.Billing.Invoice", "invoice")
                        .WithMany("payments")
                        .HasForeignKey("invoiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("invoice");
                });

            modelBuilder.Entity("FZ.Auth.Domain.Billing.Price", b =>
                {
                    b.HasOne("FZ.Auth.Domain.Billing.Plan", "plan")
                        .WithMany("prices")
                        .HasForeignKey("planID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("plan");
                });

            modelBuilder.Entity("FZ.Auth.Domain.Billing.UserSubscription", b =>
                {
                    b.HasOne("FZ.Auth.Domain.Billing.Plan", "plan")
                        .WithMany()
                        .HasForeignKey("planID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FZ.Auth.Domain.Billing.Price", "price")
                        .WithMany()
                        .HasForeignKey("priceID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("FZ.Auth.Domain.User.AuthUser", "user")
                        .WithMany("subscriptions")
                        .HasForeignKey("userID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("plan");

                    b.Navigation("price");

                    b.Navigation("user");
                });

            modelBuilder.Entity("FZ.Auth.Domain.MFA.AuthAuditLog", b =>
                {
                    b.HasOne("FZ.Auth.Domain.User.AuthUser", "user")
                        .WithMany("auditLogs")
                        .HasForeignKey("userID");

                    b.Navigation("user");
                });

            modelBuilder.Entity("FZ.Auth.Domain.MFA.AuthMfaSecret", b =>
                {
                    b.HasOne("FZ.Auth.Domain.User.AuthUser", "user")
                        .WithOne("mfaSecret")
                        .HasForeignKey("FZ.Auth.Domain.MFA.AuthMfaSecret", "userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("FZ.Auth.Domain.MFA.AuthUserSession", b =>
                {
                    b.HasOne("FZ.Auth.Domain.User.AuthUser", "user")
                        .WithMany("sessions")
                        .HasForeignKey("userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("FZ.Auth.Domain.Role.AuthRolePermission", b =>
                {
                    b.HasOne("FZ.Auth.Domain.Role.AuthPermission", "permission")
                        .WithMany("rolePermissions")
                        .HasForeignKey("permissionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FZ.Auth.Domain.Role.AuthRole", "role")
                        .WithMany("rolePermissions")
                        .HasForeignKey("roleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("permission");

                    b.Navigation("role");
                });

            modelBuilder.Entity("FZ.Auth.Domain.Role.AuthUserRole", b =>
                {
                    b.HasOne("FZ.Auth.Domain.Role.AuthRole", "role")
                        .WithMany("userRoles")
                        .HasForeignKey("roleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FZ.Auth.Domain.User.AuthUser", "user")
                        .WithMany("userRoles")
                        .HasForeignKey("userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("role");

                    b.Navigation("user");
                });

            modelBuilder.Entity("FZ.Auth.Domain.Token.AuthEmailVerification", b =>
                {
                    b.HasOne("FZ.Auth.Domain.User.AuthUser", "user")
                        .WithMany("emailVerifications")
                        .HasForeignKey("userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("FZ.Auth.Domain.Token.AuthPasswordReset", b =>
                {
                    b.HasOne("FZ.Auth.Domain.User.AuthUser", "user")
                        .WithMany("passwordResets")
                        .HasForeignKey("userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("FZ.Auth.Domain.Token.AuthRefreshToken", b =>
                {
                    b.HasOne("FZ.Auth.Domain.MFA.AuthUserSession", "session")
                        .WithMany("refreshTokens")
                        .HasForeignKey("sessionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FZ.Auth.Domain.User.AuthUser", "user")
                        .WithMany("refreshTokens")
                        .HasForeignKey("userID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("session");

                    b.Navigation("user");
                });

            modelBuilder.Entity("FZ.Auth.Domain.User.AuthProfile", b =>
                {
                    b.HasOne("FZ.Auth.Domain.User.AuthUser", "user")
                        .WithOne("profile")
                        .HasForeignKey("FZ.Auth.Domain.User.AuthProfile", "userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("FZ.Auth.Domain.Billing.Invoice", b =>
                {
                    b.Navigation("payments");
                });

            modelBuilder.Entity("FZ.Auth.Domain.Billing.Order", b =>
                {
                    b.Navigation("invoices");
                });

            modelBuilder.Entity("FZ.Auth.Domain.Billing.Plan", b =>
                {
                    b.Navigation("orders");

                    b.Navigation("prices");
                });

            modelBuilder.Entity("FZ.Auth.Domain.Billing.Price", b =>
                {
                    b.Navigation("orders");
                });

            modelBuilder.Entity("FZ.Auth.Domain.Billing.UserSubscription", b =>
                {
                    b.Navigation("invoices");
                });

            modelBuilder.Entity("FZ.Auth.Domain.MFA.AuthUserSession", b =>
                {
                    b.Navigation("refreshTokens");
                });

            modelBuilder.Entity("FZ.Auth.Domain.Role.AuthPermission", b =>
                {
                    b.Navigation("rolePermissions");
                });

            modelBuilder.Entity("FZ.Auth.Domain.Role.AuthRole", b =>
                {
                    b.Navigation("rolePermissions");

                    b.Navigation("userRoles");
                });

            modelBuilder.Entity("FZ.Auth.Domain.User.AuthUser", b =>
                {
                    b.Navigation("auditLogs");

                    b.Navigation("emailVerifications");

                    b.Navigation("invoices");

                    b.Navigation("mfaSecret")
                        .IsRequired();

                    b.Navigation("orders");

                    b.Navigation("passwordResets");

                    b.Navigation("profile")
                        .IsRequired();

                    b.Navigation("refreshTokens");

                    b.Navigation("sessions");

                    b.Navigation("subscriptions");

                    b.Navigation("userRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
