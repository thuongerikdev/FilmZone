// <auto-generated />
using System;
using FZ.Movie.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FZ.WebAPI.Migrations.MovieDb
{
    [DbContext(typeof(MovieDbContext))]
    [Migration("20251005093858_MovieV1")]
    partial class MovieV1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FZ.Movie.Domain.Catalog.Episode", b =>
                {
                    b.Property<int>("episodeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("episodeID"));

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<int?>("durationSeconds")
                        .HasColumnType("integer");

                    b.Property<int>("episodeNumber")
                        .HasColumnType("integer");

                    b.Property<int>("movieID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("releaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("seasonNumber")
                        .HasColumnType("integer");

                    b.Property<string>("synopsis")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("episodeID");

                    b.HasIndex("movieID", "seasonNumber", "episodeNumber")
                        .IsUnique();

                    b.ToTable("Episode", "movie");
                });

            modelBuilder.Entity("FZ.Movie.Domain.Catalog.Movies", b =>
                {
                    b.Property<int>("movieID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("movieID"));

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<int?>("durationSeconds")
                        .HasColumnType("integer");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("movieType")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("originalTitle")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<double?>("popularity")
                        .HasColumnType("double precision");

                    b.Property<string>("rated")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<int>("regionID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("releaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("totalEpisodes")
                        .HasColumnType("integer");

                    b.Property<int?>("totalSeasons")
                        .HasColumnType("integer");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("year")
                        .HasColumnType("integer");

                    b.HasKey("movieID");

                    b.HasIndex("regionID");

                    b.HasIndex("slug")
                        .IsUnique();

                    b.ToTable("Movies", "movie");
                });

            modelBuilder.Entity("FZ.Movie.Domain.Interactions.Comment", b =>
                {
                    b.Property<int>("commentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("commentID"));

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("isEdited")
                        .HasColumnType("boolean");

                    b.Property<int>("likeCount")
                        .HasColumnType("integer");

                    b.Property<int>("movieID")
                        .HasColumnType("integer");

                    b.Property<int?>("parentID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("userID")
                        .HasColumnType("integer");

                    b.HasKey("commentID");

                    b.HasIndex("parentID");

                    b.HasIndex("movieID", "createdAt");

                    b.ToTable("Comment", "movie");
                });

            modelBuilder.Entity("FZ.Movie.Domain.Interactions.EpisodeWatchProgress", b =>
                {
                    b.Property<int>("episodeWatchProgressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("episodeWatchProgressID"));

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("durationSeconds")
                        .HasColumnType("integer");

                    b.Property<int>("episodeID")
                        .HasColumnType("integer");

                    b.Property<int?>("episodeSourceID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("lastWatchedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("positionSeconds")
                        .HasColumnType("integer");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("userID")
                        .HasColumnType("integer");

                    b.HasKey("episodeWatchProgressID");

                    b.HasIndex("episodeID");

                    b.HasIndex("episodeSourceID");

                    b.HasIndex("userID", "episodeID", "episodeSourceID")
                        .IsUnique();

                    b.ToTable("EpisodeWatchProgress", "movie");
                });

            modelBuilder.Entity("FZ.Movie.Domain.Interactions.SavedMovie", b =>
                {
                    b.Property<int>("savedMovieID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("savedMovieID"));

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("movieID")
                        .HasColumnType("integer");

                    b.Property<int>("userID")
                        .HasColumnType("integer");

                    b.HasKey("savedMovieID");

                    b.HasIndex("movieID");

                    b.ToTable("SavedMovie", "movie");
                });

            modelBuilder.Entity("FZ.Movie.Domain.Interactions.UserRating", b =>
                {
                    b.Property<int>("userID")
                        .HasColumnType("integer");

                    b.Property<int>("movieID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("stars")
                        .HasColumnType("integer");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("userRatingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("userRatingID"));

                    b.HasKey("userID", "movieID");

                    b.HasIndex("movieID");

                    b.ToTable("UserRating", "movie");
                });

            modelBuilder.Entity("FZ.Movie.Domain.Interactions.WatchProgress", b =>
                {
                    b.Property<int>("watchProgressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("watchProgressID"));

                    b.Property<int?>("MoviesmovieID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("durationSeconds")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("lastWatchedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("movieID")
                        .HasColumnType("integer");

                    b.Property<int>("positionSeconds")
                        .HasColumnType("integer");

                    b.Property<int?>("sourceID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("userID")
                        .HasColumnType("integer");

                    b.HasKey("watchProgressID");

                    b.HasIndex("MoviesmovieID");

                    b.HasIndex("movieID");

                    b.HasIndex("sourceID");

                    b.HasIndex("userID", "movieID", "sourceID")
                        .IsUnique();

                    b.ToTable("WatchProgress", "movie");
                });

            modelBuilder.Entity("FZ.Movie.Domain.Media.EpisodeSource", b =>
                {
                    b.Property<int>("episodeSourceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("episodeSourceID"));

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("episodeID")
                        .HasColumnType("integer");

                    b.Property<bool>("isActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("isVipOnly")
                        .HasColumnType("boolean");

                    b.Property<string>("language")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("quality")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("sourceID")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("sourceName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("sourceType")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("sourceUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("episodeSourceID");

                    b.HasIndex("episodeID", "sourceType", "sourceID", "language", "quality")
                        .IsUnique();

                    b.ToTable("EpisodeSource", "movie");
                });

            modelBuilder.Entity("FZ.Movie.Domain.Media.ImageSource", b =>
                {
                    b.Property<int>("imageSourceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("imageSourceID"));

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("imageSourceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("imageSourcetype")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("source")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("imageSourceID");

                    b.ToTable("ImageSource", "movie");
                });

            modelBuilder.Entity("FZ.Movie.Domain.Media.MovieImage", b =>
                {
                    b.Property<int>("movieImageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("movieImageID"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("movieID")
                        .HasColumnType("integer");

                    b.HasKey("movieImageID");

                    b.HasIndex("movieID");

                    b.ToTable("MovieImage", "movie");
                });

            modelBuilder.Entity("FZ.Movie.Domain.Media.MovieSource", b =>
                {
                    b.Property<int>("movieSourceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("movieSourceID"));

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("isActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("isVipOnly")
                        .HasColumnType("boolean");

                    b.Property<string>("language")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<int>("movieID")
                        .HasColumnType("integer");

                    b.Property<string>("quality")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("sourceID")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("sourceName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("sourceType")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("sourceUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("movieSourceID");

                    b.HasIndex("movieID", "sourceType", "sourceID", "language", "quality")
                        .IsUnique();

                    b.ToTable("MovieSource", "movie");
                });

            modelBuilder.Entity("FZ.Movie.Domain.People.MoviePerson", b =>
                {
                    b.Property<int>("movieID")
                        .HasColumnType("integer");

                    b.Property<int>("personID")
                        .HasColumnType("integer");

                    b.Property<string>("role")
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)");

                    b.Property<string>("characterName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("creditOrder")
                        .HasColumnType("integer");

                    b.Property<int>("moviePersonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("moviePersonID"));

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("movieID", "personID", "role");

                    b.HasIndex("personID");

                    b.ToTable("MoviePerson", "movie");
                });

            modelBuilder.Entity("FZ.Movie.Domain.People.Person", b =>
                {
                    b.Property<int>("personID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("personID"));

                    b.Property<string>("avatar")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("biography")
                        .HasColumnType("text");

                    b.Property<DateTime?>("birthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("fullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("knownFor")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("regionID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("personID");

                    b.HasIndex("regionID");

                    b.ToTable("Person", "movie");
                });

            modelBuilder.Entity("FZ.Movie.Domain.People.Region", b =>
                {
                    b.Property<int>("regionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("regionID"));

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("regionID");

                    b.ToTable("Region", "movie");
                });

            modelBuilder.Entity("FZ.Movie.Domain.Taxonomy.MovieTag", b =>
                {
                    b.Property<int>("movieTagID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("movieTagID"));

                    b.Property<DateTime>("createAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("movieID")
                        .HasColumnType("integer");

                    b.Property<int>("tagID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("movieTagID");

                    b.HasIndex("tagID");

                    b.HasIndex("movieID", "tagID")
                        .IsUnique();

                    b.ToTable("MovieTag", "movie");
                });

            modelBuilder.Entity("FZ.Movie.Domain.Taxonomy.Tag", b =>
                {
                    b.Property<int>("tagID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("tagID"));

                    b.Property<DateTime>("createAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("tagDescription")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("tagName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<DateTime>("updateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("tagID");

                    b.ToTable("Tag", "movie");
                });

            modelBuilder.Entity("FZ.Movie.Domain.Catalog.Episode", b =>
                {
                    b.HasOne("FZ.Movie.Domain.Catalog.Movies", "movie")
                        .WithMany("episodes")
                        .HasForeignKey("movieID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("movie");
                });

            modelBuilder.Entity("FZ.Movie.Domain.Catalog.Movies", b =>
                {
                    b.HasOne("FZ.Movie.Domain.People.Region", "regions")
                        .WithMany("Movies")
                        .HasForeignKey("regionID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("regions");
                });

            modelBuilder.Entity("FZ.Movie.Domain.Interactions.Comment", b =>
                {
                    b.HasOne("FZ.Movie.Domain.Catalog.Movies", "movie")
                        .WithMany("comments")
                        .HasForeignKey("movieID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FZ.Movie.Domain.Interactions.Comment", "parent")
                        .WithMany("replies")
                        .HasForeignKey("parentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("movie");

                    b.Navigation("parent");
                });

            modelBuilder.Entity("FZ.Movie.Domain.Interactions.EpisodeWatchProgress", b =>
                {
                    b.HasOne("FZ.Movie.Domain.Catalog.Episode", "episode")
                        .WithMany()
                        .HasForeignKey("episodeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FZ.Movie.Domain.Media.EpisodeSource", "episodeSource")
                        .WithMany()
                        .HasForeignKey("episodeSourceID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("episode");

                    b.Navigation("episodeSource");
                });

            modelBuilder.Entity("FZ.Movie.Domain.Interactions.SavedMovie", b =>
                {
                    b.HasOne("FZ.Movie.Domain.Catalog.Movies", "movie")
                        .WithMany("savedBy")
                        .HasForeignKey("movieID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("movie");
                });

            modelBuilder.Entity("FZ.Movie.Domain.Interactions.UserRating", b =>
                {
                    b.HasOne("FZ.Movie.Domain.Catalog.Movies", "movie")
                        .WithMany("ratings")
                        .HasForeignKey("movieID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("movie");
                });

            modelBuilder.Entity("FZ.Movie.Domain.Interactions.WatchProgress", b =>
                {
                    b.HasOne("FZ.Movie.Domain.Catalog.Movies", null)
                        .WithMany("watchProgresses")
                        .HasForeignKey("MoviesmovieID");

                    b.HasOne("FZ.Movie.Domain.Catalog.Movies", "movie")
                        .WithMany()
                        .HasForeignKey("movieID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FZ.Movie.Domain.Media.MovieSource", "source")
                        .WithMany()
                        .HasForeignKey("sourceID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("movie");

                    b.Navigation("source");
                });

            modelBuilder.Entity("FZ.Movie.Domain.Media.EpisodeSource", b =>
                {
                    b.HasOne("FZ.Movie.Domain.Catalog.Episode", "episode")
                        .WithMany("sources")
                        .HasForeignKey("episodeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("episode");
                });

            modelBuilder.Entity("FZ.Movie.Domain.Media.MovieImage", b =>
                {
                    b.HasOne("FZ.Movie.Domain.Catalog.Movies", "Movie")
                        .WithMany("movieImages")
                        .HasForeignKey("movieID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("FZ.Movie.Domain.Media.MovieSource", b =>
                {
                    b.HasOne("FZ.Movie.Domain.Catalog.Movies", "movie")
                        .WithMany("sources")
                        .HasForeignKey("movieID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("movie");
                });

            modelBuilder.Entity("FZ.Movie.Domain.People.MoviePerson", b =>
                {
                    b.HasOne("FZ.Movie.Domain.Catalog.Movies", "movie")
                        .WithMany("credits")
                        .HasForeignKey("movieID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FZ.Movie.Domain.People.Person", "person")
                        .WithMany("credits")
                        .HasForeignKey("personID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("movie");

                    b.Navigation("person");
                });

            modelBuilder.Entity("FZ.Movie.Domain.People.Person", b =>
                {
                    b.HasOne("FZ.Movie.Domain.People.Region", "region")
                        .WithMany("People")
                        .HasForeignKey("regionID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("region");
                });

            modelBuilder.Entity("FZ.Movie.Domain.Taxonomy.MovieTag", b =>
                {
                    b.HasOne("FZ.Movie.Domain.Catalog.Movies", "movie")
                        .WithMany("movieTags")
                        .HasForeignKey("movieID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FZ.Movie.Domain.Taxonomy.Tag", "tag")
                        .WithMany("movieTags")
                        .HasForeignKey("tagID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("movie");

                    b.Navigation("tag");
                });

            modelBuilder.Entity("FZ.Movie.Domain.Catalog.Episode", b =>
                {
                    b.Navigation("sources");
                });

            modelBuilder.Entity("FZ.Movie.Domain.Catalog.Movies", b =>
                {
                    b.Navigation("comments");

                    b.Navigation("credits");

                    b.Navigation("episodes");

                    b.Navigation("movieImages");

                    b.Navigation("movieTags");

                    b.Navigation("ratings");

                    b.Navigation("savedBy");

                    b.Navigation("sources");

                    b.Navigation("watchProgresses");
                });

            modelBuilder.Entity("FZ.Movie.Domain.Interactions.Comment", b =>
                {
                    b.Navigation("replies");
                });

            modelBuilder.Entity("FZ.Movie.Domain.People.Person", b =>
                {
                    b.Navigation("credits");
                });

            modelBuilder.Entity("FZ.Movie.Domain.People.Region", b =>
                {
                    b.Navigation("Movies");

                    b.Navigation("People");
                });

            modelBuilder.Entity("FZ.Movie.Domain.Taxonomy.Tag", b =>
                {
                    b.Navigation("movieTags");
                });
#pragma warning restore 612, 618
        }
    }
}
